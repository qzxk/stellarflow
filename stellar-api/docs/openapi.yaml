openapi: 3.0.3
info:
  title: Stellar API
  description: |
    # Stellar API Documentation
    
    Modern REST API with JWT authentication, role-based access control, and comprehensive security features.
    
    ## Features
    - JWT-based authentication with refresh tokens
    - Role-based access control (RBAC)
    - Rate limiting and security headers
    - Input validation and sanitization
    - Comprehensive error handling
    - API versioning
    - Two-factor authentication support
    - Account lockout protection
    
    ## Authentication
    
    This API uses JWT (JSON Web Tokens) for authentication. To access protected endpoints:
    
    1. Register a new account or login with existing credentials
    2. Obtain an access token from the `/auth/login` endpoint
    3. Include the token in the `Authorization` header: `Bearer <token>`
    4. Use refresh tokens to obtain new access tokens when they expire
    
    ## Rate Limiting
    
    API requests are rate-limited to prevent abuse:
    - Default: 100 requests per 15 minutes per IP
    - Authentication endpoints: 5 requests per 15 minutes
    - Password reset: 3 requests per hour
    
    ## Error Responses
    
    All errors follow a consistent format:
    ```json
    {
      "error": "Error type",
      "message": "Human-readable error message",
      "statusCode": 400,
      "details": {} // Optional additional information
    }
    ```
    
  version: 1.0.0
  contact:
    name: Stellar Team
    email: dev@stellar-api.com
    url: https://stellar-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.stellar-api.com/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management and profiles
  - name: Health
    description: System health and status

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_-]+$"
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        profile:
          $ref: '#/components/schemas/UserProfile'
        emailVerified:
          type: boolean
          example: true
        status:
          type: string
          enum: [active, inactive, suspended, pending]
          example: "active"
        role:
          type: string
          enum: [user, admin, moderator]
          example: "user"
        lastLogin:
          type: string
          format: date-time
        lastActive:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserProfile:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          example: "John"
        lastName:
          type: string
          maxLength: 50
          example: "Doe"
        fullName:
          type: string
          readOnly: true
          example: "John Doe"
        avatar:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          maxLength: 500
          example: "Software developer passionate about building great APIs"
        dateOfBirth:
          type: string
          format: date
        phoneNumber:
          type: string
          pattern: "^\\+?[\\d\\s-()]+$"
          example: "+1-555-123-4567"

    LoginRequest:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
          description: Email or username
          example: "john@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "SecurePassword123!"
        rememberMe:
          type: boolean
          default: false
          description: Generate longer-lived refresh token

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/User'
        tokens:
          type: object
          properties:
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expiresIn:
              type: integer
              description: Access token expiry time in seconds
              example: 3600

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_-]+$"
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: Must contain uppercase, lowercase, number, and special character
          example: "SecurePassword123!"
        profile:
          type: object
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"

    PasswordResetConfirm:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: "reset-token-123"
        newPassword:
          type: string
          format: password
          minLength: 8
          example: "NewSecurePassword123!"

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
          example: "CurrentPassword123!"
        newPassword:
          type: string
          format: password
          minLength: 8
          example: "NewSecurePassword123!"

    UpdateProfileRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            bio:
              type: string
              maxLength: 500
            dateOfBirth:
              type: string
              format: date
            phoneNumber:
              type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "ValidationError"
        message:
          type: string
          example: "Invalid request parameters"
        statusCode:
          type: integer
          example: 400
        details:
          type: object
          additionalProperties: true

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Uptime in seconds
          example: 3600
        version:
          type: string
          example: "1.0.0"
        services:
          type: object
          properties:
            database:
              type: object
              properties:
                status:
                  type: string
                  enum: [connected, disconnected, error]
                responseTime:
                  type: number
                  description: Response time in milliseconds
            cache:
              type: object
              properties:
                status:
                  type: string
                  enum: [connected, disconnected, error]

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the current health status of the API and its dependencies
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2024-01-15T10:30:00Z"
                uptime: 3600
                version: "1.0.0"
                services:
                  database:
                    status: "connected"
                    responseTime: 5
                  cache:
                    status: "connected"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email verification
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User registered successfully. Please check your email to verify your account."
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and receive access and refresh tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate current refresh token and logout user
      operationId: logout
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Optional refresh token to invalidate
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Logged out successfully"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Use refresh token to obtain new access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      expiresIn:
                        type: integer
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "If an account exists with that email, a password reset link has been sent."

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using token from email
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password reset successfully"

  /auth/verify-email:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user email using token from verification email
      operationId: verifyEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email verified successfully"

  /auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend verification email
      description: Resend email verification link
      operationId: resendVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Verification email sent"

  /users/profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update the authenticated user's profile information
      operationId: updateProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/change-password:
    post:
      tags:
        - Users
      summary: Change password
      description: Change the authenticated user's password
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password changed successfully"
        '401':
          description: Current password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/delete:
    delete:
      tags:
        - Users
      summary: Delete user account
      description: Permanently delete the authenticated user's account
      operationId: deleteAccount
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  description: Current password for confirmation
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account deleted successfully"

  /users/avatar:
    post:
      tags:
        - Users
      summary: Upload avatar
      description: Upload a new avatar image for the authenticated user
      operationId: uploadAvatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file (max 5MB, JPEG/PNG)
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  avatarUrl:
                    type: string
                    format: uri
                    example: "https://api.stellar-api.com/uploads/avatars/user123.jpg"

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user's public profile by their ID (admin only)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: objectId
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get a paginated list of users (admin only)
      operationId: listUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - name: sort
          in: query
          schema:
            type: string
            enum: [createdAt, -createdAt, username, -username, email, -email]
            default: -createdAt
          description: Sort field and order
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, suspended, pending]
          description: Filter by status
        - name: role
          in: query
          schema:
            type: string
            enum: [user, admin, moderator]
          description: Filter by role
        - name: search
          in: query
          schema:
            type: string
          description: Search in username and email
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 100
                      pages:
                        type: integer
                        example: 5