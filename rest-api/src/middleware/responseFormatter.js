// Response formatting middleware
export const responseFormatter = (req, res, next) => {
  const originalJson = res.json;\n  \n  res.json = function(data) {\n    // Format successful responses\n    if (res.statusCode < 400) {\n      const formattedResponse = {\n        success: true,\n        timestamp: new Date().toISOString(),\n        path: req.originalUrl,\n        method: req.method,\n        ...data\n      };\n      \n      // Add request ID if available\n      const requestId = req.headers['x-request-id'] || req.requestId;\n      if (requestId) {\n        formattedResponse.requestId = requestId;\n      }\n      \n      return originalJson.call(this, formattedResponse);\n    } else {\n      // Error responses are handled by error middleware\n      return originalJson.call(this, data);\n    }\n  };\n  \n  next();\n};\n\n// Request ID middleware\nexport const requestId = (req, res, next) => {\n  const id = req.headers['x-request-id'] || `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  req.requestId = id;\n  res.setHeader('X-Request-ID', id);\n  next();\n};\n\n// Performance monitoring middleware\nexport const performanceMonitor = (req, res, next) => {\n  const start = process.hrtime();\n  req.startTime = start;\n  \n  res.on('finish', () => {\n    const diff = process.hrtime(start);\n    const time = diff[0] * 1e3 + diff[1] * 1e-6; // Convert to milliseconds\n    \n    // Add performance headers\n    res.setHeader('X-Response-Time', `${time.toFixed(2)}ms`);\n    \n    // Log slow requests\n    if (time > 1000) {\n      console.warn(`Slow request detected: ${req.method} ${req.originalUrl} - ${time.toFixed(2)}ms`);\n    }\n  });\n  \n  next();\n};\n\n// Cache control middleware\nexport const cacheControl = (options = {}) => {\n  const {\n    maxAge = 300, // 5 minutes default\n    public: isPublic = true,\n    mustRevalidate = false\n  } = options;\n  \n  return (req, res, next) => {\n    if (req.method === 'GET') {\n      let cacheDirectives = [];\n      \n      if (isPublic) {\n        cacheDirectives.push('public');\n      } else {\n        cacheDirectives.push('private');\n      }\n      \n      cacheDirectives.push(`max-age=${maxAge}`);\n      \n      if (mustRevalidate) {\n        cacheDirectives.push('must-revalidate');\n      }\n      \n      res.setHeader('Cache-Control', cacheDirectives.join(', '));\n    } else {\n      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    }\n    \n    next();\n  };\n};\n\n// Pagination helper middleware\nexport const paginationHelper = (req, res, next) => {\n  // Parse pagination parameters\n  const page = Math.max(1, parseInt(req.query.page) || 1);\n  const limit = Math.min(100, Math.max(1, parseInt(req.query.limit) || 20));\n  const offset = (page - 1) * limit;\n  \n  // Add to request object\n  req.pagination = {\n    page,\n    limit,\n    offset,\n    buildResponse: (items, totalItems) => {\n      const totalPages = Math.ceil(totalItems / limit);\n      \n      return {\n        items,\n        pagination: {\n          currentPage: page,\n          totalPages,\n          totalItems,\n          itemsPerPage: limit,\n          hasNext: page < totalPages,\n          hasPrev: page > 1,\n          nextPage: page < totalPages ? page + 1 : null,\n          prevPage: page > 1 ? page - 1 : null\n        }\n      };\n    }\n  };\n  \n  next();\n};\n\n// API versioning middleware\nexport const apiVersion = (version) => {\n  return (req, res, next) => {\n    req.apiVersion = version;\n    res.setHeader('API-Version', version);\n    next();\n  };\n};\n\n// Content negotiation middleware\nexport const contentNegotiation = (req, res, next) => {\n  const acceptHeader = req.headers.accept || 'application/json';\n  \n  // For now, we only support JSON\n  if (!acceptHeader.includes('application/json') && !acceptHeader.includes('*/*')) {\n    return res.status(406).json({\n      error: 'Not Acceptable',\n      message: 'This API only supports application/json content type',\n      supportedTypes: ['application/json']\n    });\n  }\n  \n  res.setHeader('Content-Type', 'application/json; charset=utf-8');\n  next();\n};